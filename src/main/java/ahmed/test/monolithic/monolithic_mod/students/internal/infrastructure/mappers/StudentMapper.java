package ahmed.test.monolithic.monolithic_mod.students.internal.infrastructure.mappers;

import ahmed.test.monolithic.monolithic_mod.students.internal.domain.model.Student;
import ahmed.test.monolithic.monolithic_mod.students.internal.domain.model.StudentProp;

import ahmed.test.monolithic.monolithic_mod.students.internal.infrastructure.db.StudentEntity;
import org.springframework.stereotype.Component;

import java.util.ArrayList;

@Component
public final class StudentMapper {

    private final StudentSubjectsMapper studentSubjectsMapper;
    public StudentMapper(final StudentSubjectsMapper studentSubjectsMapper) {
        this.studentSubjectsMapper = studentSubjectsMapper;
    }


    // Entity -> Domain (rehydration)
    public  Student toDomain(StudentEntity e) {
        if (e == null) return null;
        // uses the domain factory (private ctor is respected)
        return Student.create(new StudentProp(
                e.getStudentId(),
                e.getFirstName(),
                e.getLastName()
                ,e.getStudentSubjects() !=null
                && !e.getStudentSubjects().isEmpty() ? e.getStudentSubjects().stream().map(studentSubjectsMapper::toDomain).toList() : null
        ));
    }

    // Domain -> Entity (persistence)
    public  StudentEntity toEntity(Student d) {
        if (d == null) return null;

        var e = new StudentEntity();

        // If your id is generated by DB, you may want to NOT set it on insert.
        //Integer id = d.id() != null ? d.id().value() : null; // assuming Student.id() returns StudentId
        e.setStudentId(d.getStudentId().value());

        e.setFirstName(d.getFirstName()); // or d.getFirstName() if you have getters
        e.setLastName(d.getLastName());   // or d.getLastName()

        if(e.getStudentSubjects() == null )  e.setStudentSubjects(new ArrayList<>());
        if(d.getSubjects() != null ) e.setStudentSubjects(d.getSubjects().stream().map(studentSubjectsMapper::toEntity).toList() ) ;
        return e;
    }
}
